name: "Sample Container App with Variable Substitution"
description: "This example shows how to use variable substitution in a Container App deployment workflow"

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "tfvars/app.yaml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod

env:
  CONTAINER_APP_NAME: sample-app

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push container image
        run: |
          IMAGE_NAME=${{ secrets.ACR_SERVER }}/${{ env.CONTAINER_APP_NAME }}
          IMAGE_TAG=$(git rev-parse --short HEAD)

          # Build and push Docker image
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:latest ./src
          docker push ${IMAGE_NAME}:${IMAGE_TAG}
          docker push ${IMAGE_NAME}:latest

          # Save the image name and tag for the deploy stage
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      # Process app.yaml with variable substitution using composite action
      - name: Process app.yaml variable substitution
        uses: HafslundEcoVannkraft/stratus-tf-res-app-containerapp/.github/actions/yaml-variable-substitution@main
        with:
          app_yaml_path: "tfvars/app.yaml"
          output_path: "tfvars/app.yaml.processed"
          environment: ${{ github.event.inputs.environment || 'dev' }}
          keyvault_name: ${{ vars.KEYVAULT_NAME }}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Move processed file to original location
      - name: Use processed app.yaml
        run: |
          if [ -f "tfvars/app.yaml.processed" ]; then
            mv tfvars/app.yaml.processed tfvars/app.yaml
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}/container-apps/${{ env.CONTAINER_APP_NAME }}.tfstate"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="location=northeurope" \
            -var="code_name=myteam" \
            -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
            -var="state_storage_account_name=${{ secrets.TERRAFORM_BACKEND_SA }}" \
            -var="remote_tfstate_rg=${{ secrets.TERRAFORM_BACKEND_RG }}" \
            -var="remote_tfstate_storage_account=${{ secrets.TERRAFORM_BACKEND_SA }}" \
            -var="remote_tfstate_key=${{ github.event.inputs.environment || 'dev' }}/container-app-environments.tfstate" \
            -var="image_name=${{ env.IMAGE_NAME }}" \
            -var="image_tag=${{ env.IMAGE_TAG }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
