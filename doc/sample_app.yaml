# Sample Azure Container App YAML Configuration
# filepath: /tfvars/app.yaml

# Required parameters
name: "sample-app"
revision_mode: "Single" # Possible values: Single, Multiple

# Note: resource_group_name and container_app_environment_resource_id are now automatically
# sourced from remote state and should not be specified

# Stratus-specific configuration
container_app_environment_target: "default" # Target a specific environment in the remote state

# Template configuration
template:
  max_replicas: 10
  min_replicas: 1

  # Container configuration
  containers:
    - name: "sample-app" # Optional, defaults to app name
      # image: "myregistry.azurecr.io/sample-app:v1.0" # Uncomment to override the image built by GitHub workflow
      cpu: 0.5
      memory: "1Gi"
      env:
        - name: "ENVIRONMENT"
          value: "${vars:ENVIRONMENT:production}" # From GitHub Variables with default
        - name: "APPLICATIONINSIGHTS_CONNECTION_STRING"
          value: "${kv:applicationinsights-connection-string}" # From Azure KeyVault
        - name: "API_KEY"
          value: "${secrets:api_key!}" # Required secret from GitHub Secrets
        - name: "LOG_LEVEL"
          value: "${env:LOG_LEVEL:INFO}" # Can be overridden at runtime

      # Health probes
      liveness_probes:
        - transport: "HTTP"
          port: 8080
          path: "/health"
          interval_seconds: 10
          timeout: 5

      readiness_probes:
        - transport: "HTTP"
          port: 8080
          path: "/ready"

  # Scale rules
  http_scale_rules:
    - name: "http-scale"
      concurrent_requests: "50"

# Ingress configuration
ingress:
  external_enabled: true
  target_port: 8080
  transport: "http"

  traffic_weight:
    - label: "production"
      latest_revision: true
      percentage: 100

# Dapr configuration
dapr:
  app_id: "sample-app"
  app_port: 8080
  app_protocol: "http"

# Secrets configuration
secrets:
  app-secret:
    name: "APP_SECRET"
    value: "${secrets:app_secret}" # From GitHub Secrets
  db-connection:
    name: "DB_CONNECTION"
    value: "${kv:database-connection-string!}" # Required from KeyVault
  api-key:
    name: "API_KEY"
    key_vault_secret_id: "${vars:KEYVAULT_ID}/secrets/api-key" # Dynamic KeyVault reference

# Tags
tags:
  Environment: "Production"
  Department: "IT"
  Application: "SampleApp"
